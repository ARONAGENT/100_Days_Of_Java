âœ… Day 75: Interface vs Abstract Class in Java â€” Key Differences & Interview Questions
| Feature              | Interface                                                                      | Abstract Class                            |
| -------------------- | ------------------------------------------------------------------------------ | ----------------------------------------- |
| Methods              | All methods are abstract (Java 7)<br>Can have default/static methods (Java 8+) | Can have abstract and concrete methods    |
| Variables            | `public static final` only                                                     | Any type (with any access modifier)       |
| Multiple Inheritance | Supports (via implementation)                                                  | Does not support multiple inheritance     |
| Constructor          | No                                                                             | Yes                                       |
| Access Modifiers     | Only `public`                                                                  | Can use all (`public`, `protected`, etc.) |
| Purpose              | 100% abstraction                                                               | Partial abstraction                       |


ðŸ’¡ Top Interview Questions: Interface vs Abstract Class
Can an interface have a constructor in Java? Why or why not?
â†’ No, because interfaces cannot be instantiated.

Why would you use an abstract class over an interface?
â†’ When you need base functionality (common methods) along with abstract ones.

Can an abstract class implement an interface?
â†’ Yes, and it can leave implementation of some or all interface methods to its subclasses.

Can a class implement multiple interfaces? Can it extend multiple abstract classes?
â†’ A class can implement multiple interfaces but can only extend one abstract class (due to single inheritance in Java).

What happens if two interfaces have methods with the same signature?
â†’ The implementing class just provides one implementation; thereâ€™s no conflict.

How is multiple inheritance solved using interfaces in Java?
â†’ Java avoids the diamond problem because interfaces donâ€™t carry state.

Can abstract classes have final, static, or private methods?
â†’ Yes. But abstract methods cannot be final or private.