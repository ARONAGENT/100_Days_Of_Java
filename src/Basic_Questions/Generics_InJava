ðŸ“Œ Day 98: Java Generics
ðŸ”¹ What are Generics?

Generics in Java allow you to write type-safe and reusable code by enabling classes,
interfaces, and methods to operate on objects of various types while providing compile-time type checking.

ðŸ‘‰ Without generics, you would use Object type and then cast manually (risk of runtime errors).

ðŸ”¹ Benefits of Generics

Type Safety â€“ Prevents ClassCastException.
Code Reusability â€“ Works with any object type.
Compile-time Checking â€“ Errors caught early.
Eliminates Casting â€“ No need to explicitly cast objects.


ðŸš€ Java Generics with Methods

Generics in Java allow you to write reusable code that works with different data types without casting.

âœ… Syntax of a Generic Method:
public <T> void printData(T data) {
    System.out.println(data);
}
<T> â†’ Type parameter (can be anything: T, E, K, V, etc.)
T data â†’ Method can accept any type.
printData(10) â†’ Integer
printData("Hello") â†’ String

ðŸ”‘ Key Points:

Generic methods are type-safe.
They reduce code duplication.
extends Comparable<T> is used for bounds (restrict type to comparable objects).



ðŸ”¹ What are Wildcards in Generics?

In Java Generics, the wildcard ? represents an unknown type.
Itâ€™s useful when you donâ€™t know in advance what type a collection will hold, but still want to write flexible code.

ðŸ”¹ Types of Wildcards
Unbounded Wildcard <?>
Accepts any type.
Example: List<?> â†’ list of unknown objects.

Upper Bounded Wildcard <? extends T>
Accepts type T or its subclasses.
Example: List<? extends Number> â†’ can hold Integer, Double, etc.

Lower Bounded Wildcard <? super T>
Accepts type T or its superclasses.
Example: List<? super Integer> â†’ can hold Integer, Number, Object.