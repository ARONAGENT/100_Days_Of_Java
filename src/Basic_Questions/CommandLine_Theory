## 🧠 Java Program Execution with Packages and Command-Line Arguments

### ✅ 1. **Understanding `main(String[] args)`**

* This is the **entry point** of any Java application.
* The `args` array holds **command-line arguments** passed while executing the program.
* These arguments are **always `String`** by default, regardless of type (e.g., `"123"` is a string).
---

### ✅ 2. **Using Packages in Java**

* A package is a **namespace** that organizes classes to avoid name conflicts.
* Declared using:

  package Basic_Questions;

* When using a package, the class must be executed using its **fully qualified name**:

  java Basic_Questions.ClassName


---

### ✅ 3. **Compiling Java with Packages**

* You must run the `javac` compiler from the **root of the source folder** (`src`).
* Compile a file using:


  javac Basic_Questions/ClassName.java

* This command respects the package path and places `.class` files accordingly.

---

### ✅ 4. **Running Java with Command-Line Arguments**

* Arguments are passed at runtime:

  java Basic_Questions.ClassName arg1 arg2 arg3

* Example:

  java Basic_Questions.StringArgsCommandLine2 Hello I am Rohan

* Inside code:

  for (int i = 0; i < args.length; i++) {
      System.out.println("Argument " + i + ": " + args[i]);
  }

---

### ✅ 5. **Common Error: `NoClassDefFoundError`**

* Happens when you forget to include the package name while running the program.
* For example:
  ❌ `java StringArgsCommandLine2`
  ✅ `java Basic_Questions.StringArgsCommandLine2`

---

### ✅ Summary Table

| Concept        | Command or Syntax                          |
| -------------- | ------------------------------------------ |
| Define package | `package Basic_Questions;`                 |
| Compile class  | `javac Basic_Questions/YourClass.java`     |
| Run class      | `java Basic_Questions.YourClass`           |
| Pass arguments | `java Basic_Questions.YourClass arg1 arg2` |
| Access in code | `args[0], args[1] ...`                     |

---

