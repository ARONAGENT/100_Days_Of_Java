## ‚úÖ `BigDecimal` vs `BigInteger` in Java

Java provides two powerful classes in the `java.math` package to handle **large** and **precise** numbers:

| Class        | Used For                        | Handles Decimals? | Precision Type         | Common Use Case         |
| ------------ | ------------------------------- | ----------------- | ---------------------- | ----------------------- |
| `BigInteger` | Very large **whole numbers**    | ‚ùå No              | Unlimited integer size | Factorial, crypto, math |
| `BigDecimal` | Very **precise decimal** values | ‚úÖ Yes             | Arbitrary precision    | Finance, tax, billing   |

---

### üîç Why not use `int`, `long`, `float`, or `double`?

| Type               | Limitation                                                                           |
| ------------------ | ------------------------------------------------------------------------------------ |
| `int`              | Overflow above 2<sup>31</sup>‚àí1 (‚âà 2 billion)                                        |
| `long`             | Overflow above 2<sup>63</sup>‚àí1 (very large, but not unlimited)                      |
| `float` / `double` | Decimal rounding errors due to binary representation (e.g., 0.1 + 0.2 ‚â† 0.3 exactly) |

---

### ‚úÖ When to Use

* **Use `BigInteger`** when you need **accurate operations on large whole numbers**, like in:

  * Factorials
  * Cryptography
  * Prime number calculations

* **Use `BigDecimal`** when you need **precise decimal calculations**, such as:

  * Currency / Banking
  * Tax / Invoice systems
  * Scientific data processing

---

### üîß Common Methods

| Method              | `BigInteger`         | `BigDecimal`               |
| ------------------- | -------------------- | -------------------------- |
| `add()`             | ‚úÖ                    | ‚úÖ                          |
| `subtract()`        | ‚úÖ                    | ‚úÖ                          |
| `multiply()`        | ‚úÖ                    | ‚úÖ                          |
| `divide()`          | ‚úÖ                    | ‚úÖ (with rounding mode)     |
| `pow(int)`          | ‚úÖ                    | ‚úÖ                          |
| `mod()`             | ‚úÖ (modulus operator) | ‚ùå                          |
| `compareTo()`       | ‚úÖ                    | ‚úÖ                          |
| `setScale()`        | ‚ùå                    | ‚úÖ (control decimal places) |
| `valueOf(int/long)` | ‚úÖ                    | ‚úÖ                          |

---

### üß† Hinglish Explanation:

> üîπ `BigInteger` ka use tab karte hain jab **bahut bade whole number** chahiye ho ‚Äî jaise factorial ya encryption. Ye `int` ya `long` se kahin zyada bada number handle kar sakta hai.
> üîπ `BigDecimal` ka use tab karte hain jab **point wale number (decimal)** ka accurate calculation chahiye ‚Äî jaise paiso ka hisaab. `float` aur `double` galti karte hain decimal mein.
> **Banking aur finance** ke use-case mein `BigDecimal` must hai.

---

### üìå Related Classes (also in `java.math`):

| Class          | Purpose                                                       |
| -------------- | ------------------------------------------------------------- |
| `MathContext`  | Defines precision and rounding for `BigDecimal` operations    |
| `RoundingMode` | Enum to specify how to round values (e.g., HALF\_UP, CEILING) |

---

### ‚úÖ Summary Table

| Feature          | `BigInteger`           | `BigDecimal`           |
| ---------------- | ---------------------- | ---------------------- |
| Decimal Support  | ‚ùå                      | ‚úÖ                      |
| Used For         | Whole numbers          | Decimal precision      |
| Handles Overflow | ‚úÖ Unlimited            | ‚úÖ Unlimited            |
| Suitable For     | Math, Crypto           | Finance, Billing       |
| Performance      | Slower than primitives | Slower than primitives |

---


