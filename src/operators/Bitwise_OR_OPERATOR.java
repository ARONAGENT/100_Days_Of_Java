package operators;

public class Bitwise_OR_OPERATOR {
    public static void main(String[] args) {
        // Bitwise OR: 1 if either bit is 1, else 0.
        // Truth Table:
        // 0 | 0 = 0
        // 0 | 1 = 1
        // 1 | 0 = 1
        // 1 | 1 = 1

        // 20 examples
        int[][] examples = {
                {5, 3},    // 101 | 011 = 111 (7)
                {8, 4},    // 1000 | 0100 = 1100 (12)
                {12, 6},   // 1100 | 0110 = 1110 (14)
                {1, 0},    // 0001 | 0000 = 0001 (1)
                {7, 1},    // 0111 | 0001 = 0111 (7)
                {9, 5},    // 1001 | 0101 = 1101 (13)
                {15, 2},   // 1111 | 0010 = 1111 (15)
                {10, 4},   // 1010 | 0100 = 1110 (14)
                {6, 1},    // 0110 | 0001 = 0111 (7)
                {0, 0},    // 0000 | 0000 = 0000 (0)
                {255, 1},  // 11111111 | 00000001 = 11111111 (255)
                {100, 50}, // 1100100 | 0110010 = 1110110 (118)
                {32, 8},   // 100000 | 001000 = 101000 (40)
                {20, 4},   // 10100 | 00100 = 10100 (20)
                {13, 7},   // 01101 | 00111 = 01111 (15)
                {18, 3},   // 10010 | 00011 = 10011 (19)
                {50, 25},  // 110010 | 011001 = 111011 (59)
                {60, 5},   // 111100 | 000101 = 111101 (61)
                {70, 15},  // 1000110 | 0001111 = 1001111 (79)
                {255, 128} // 11111111 | 10000000 = 11111111 (255)
        };

        System.out.println("Bitwise OR (|) Operator Examples:");
        for (int i = 0; i < examples.length; i++) {
            int a = examples[i][0];
            int b = examples[i][1];
            int result = a | b;
            System.out.printf("%2d) %d | %d = %d%n", i + 1, a, b, result);
        }
    }
}
