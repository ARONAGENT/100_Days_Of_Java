## 🔧 What Are Functional Interfaces?

A **functional interface** in Java is an interface that has exactly **one abstract method**.
They are the basis of **lambda expressions** and enable **functional programming** in Java 8+.

> Functional interfaces are annotated with `@FunctionalInterface`, though it's optional.

---

## ✅ 1. `Supplier<T>`

### 🔹 Purpose:

Represents a **supplier** of results – i.e., **no input, but returns a result**.

### 🔹 Method:

```java
T get();
```

### ✅ Example:

```java
import java.util.function.Supplier;

public class SupplierExample {
    public static void main(String[] args) {
        Supplier<String> nameSupplier = () -> "Hello from Supplier!";
        System.out.println(nameSupplier.get()); // Output: Hello from Supplier!
    }
}
```

---

## ✅ 2. `Consumer<T>`

### 🔹 Purpose:

Represents an operation that **takes a single argument and returns no result**.

### 🔹 Method:

```java
void accept(T t);
```

### ✅ Example:

```java
import java.util.function.Consumer;

public class ConsumerExample {
    public static void main(String[] args) {
        Consumer<String> printName = name -> System.out.println("Hello, " + name);
        printName.accept("Rohan"); // Output: Hello, Rohan
    }
}
```

---

## ✅ 3. `Predicate<T>`

### 🔹 Purpose:

Represents a **boolean-valued function** (used for testing conditions).

### 🔹 Method:

```java
boolean test(T t);
```

### ✅ Example:

```java
import java.util.function.Predicate;

public class PredicateExample {
    public static void main(String[] args) {
        Predicate<Integer> isEven = number -> number % 2 == 0;
        System.out.println(isEven.test(4)); // Output: true
        System.out.println(isEven.test(5)); // Output: false
    }
}
```

---

## ✅ 4. `Function<T, R>`

### 🔹 Purpose:

Represents a function that **takes one argument and produces a result**.

### 🔹 Method:

```java
R apply(T t);
```

### ✅ Example:

```java
import java.util.function.Function;

public class FunctionExample {
    public static void main(String[] args) {
        Function<String, Integer> lengthFunction = str -> str.length();
        System.out.println(lengthFunction.apply("Hello")); // Output: 5
    }
}
```

---

## 🧠 Hinglish Summary:

| Interface | Input | Output      | Use-Case / Example                           |
| --------- | ----- | ----------- | -------------------------------------------- |
| Supplier  | ❌     | ✅           | Value return karna (no input)                |
| Consumer  | ✅     | ❌           | Print ya use karna, result return nahi karna |
| Predicate | ✅     | ✅ (boolean) | Kisi cheez ka test karna                     |
| Function  | ✅     | ✅           | Input lo aur result return karo              |

---